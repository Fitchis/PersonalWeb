generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Todo {
  id       Int      @id @default(autoincrement())
  text     String
  done     Boolean  @default(false)
  deadline DateTime?
  order    Int      @default(0)
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model JobApplication {
  id       Int    @id @default(autoincrement())
  company  String
  position String
  status   String @default("pending")
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  password      String?
  emailVerified DateTime?
  createdAt     DateTime @default(now())
  image         String?
  role          String   @default("USER")
  todos         Todo[]
  jobApplications JobApplication[]
  accounts      Account[]
  sessions      Session[]
  notifications Notification[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  type      String? 
  link      String? 

  @@index([userId, createdAt])
}